name: Release

on:
  workflow_run:
    workflows:
      - Build
    branches:
      - main
    types:
      - completed

jobs:
  get-release-context:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    outputs:
      is_tagged: ${{ steps.process-context.outputs.is_tagged }}
      tag_name: ${{ steps.process-context.outputs.tag_name }}
      should_release: ${{ steps.process-context.outputs.should_release }}
      original_event: ${{ steps.process-context.outputs.original_event }}
      original_branch: ${{ steps.process-context.outputs.original_branch }}
    steps:
      - name: Download build context
        id: download-context
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            console.log(`Finding artifacts from build workflow run ID: ${runId}`);

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            const buildContextArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "build-context"
            );

            if (!buildContextArtifact) {
              core.setFailed('Could not find the build-context artifact!');
              console.log('Available artifacts:');
              artifacts.data.artifacts.forEach(art => {
                console.log(`- ${art.name} (ID: ${art.id})`);
              });
              return false;
            }

            console.log(`Found build-context artifact with ID: ${buildContextArtifact.id}`);

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: buildContextArtifact.id,
              archive_format: 'zip'
            });

            const fs = require('fs');
            fs.writeFileSync('build-context.zip', Buffer.from(download.data));
            console.log('Downloaded build-context.zip');
            return true;

      - name: Extract build context
        if: steps.download-context.outputs.result == 'true'
        run: |
          mkdir -p build-info
          unzip build-context.zip -d build-info
          cat build-info/build-context.json
          echo "Build context retrieved successfully"

      - name: Process build context
        id: process-context
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let buildContext;
            let shouldRelease = false;
            
            try {
              if (fs.existsSync('build-info/build-context.json')) {
                const contextData = fs.readFileSync('build-info/build-context.json', 'utf8');
                buildContext = JSON.parse(contextData);
                
                // Extract values from the build context
                const originalEvent = buildContext.original_event;
                const originalBranch = buildContext.original_branch;
                const isTagged = buildContext.should_release && originalBranch === null;
                
                // Log what we found
                console.log(`Build Context - Event: ${originalEvent}, ` +
                           `Branch: ${originalBranch}, Should Release: ${buildContext.should_release}`);
                
                // Set outputs based on build context
                core.setOutput("original_event", originalEvent);
                core.setOutput("original_branch", originalBranch);
                core.setOutput("is_tagged", isTagged.toString());
                core.setOutput("tag_name", buildContext.tag_name || '');
                core.setOutput("should_release", buildContext.should_release.toString());
                
                // Check if this is a releasable build
                shouldRelease = buildContext.should_release;
              } else {
                console.log("⚠️ build-context.json not found - falling back to basic checks");
                
                // Fallback logic if build context is missing
                const runId = context.payload.workflow_run.id;
                const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });
                
                // Only release if this is from main branch
                shouldRelease = workflowRun.head_branch === 'main';
                
                core.setOutput("original_event", workflowRun.event);
                core.setOutput("original_branch", workflowRun.head_branch || 'unknown');
                core.setOutput("is_tagged", 'false');
                core.setOutput("tag_name", '');
                core.setOutput("should_release", shouldRelease.toString());
              }
            } catch (error) {
              console.error("Error processing build context:", error);
              core.setFailed(`Failed to process build context: ${error.message}`);
              return;
            }
            
            // If this shouldn't be released, notify
            if (!shouldRelease) {
              console.log("⚠️ This build was not triggered by a releasable event (main branch push or tag)");
              console.log("⚠️ Release workflow will be skipped");
            } else {
              console.log("✅ Valid release trigger detected - proceeding with release");
            }

  release-web-prod:
    needs: get-release-context
    if: ${{ needs.get-release-context.outputs.should_release == 'true' }}
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-22.04
    steps:
      - name: Download web-renderer artifact
        id: download-artifact
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            console.log(`Finding artifacts from build workflow run ID: ${runId}`);

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            const webRendererArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "web-renderer"
            );

            if (!webRendererArtifact) {
              core.setFailed('Could not find the web-renderer artifact!');
              console.log('Available artifacts:');
              artifacts.data.artifacts.forEach(art => {
                console.log(`- ${art.name} (ID: ${art.id})`);
              });
              return;
            }

            console.log(`Found web-renderer artifact with ID: ${webRendererArtifact.id}`);

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: webRendererArtifact.id,
              archive_format: 'zip'
            });

            const fs = require('fs');
            fs.writeFileSync('web-renderer.zip', Buffer.from(download.data));
            console.log('Downloaded web-renderer.zip');

      - name: Extract web-renderer artifact
        run: |
          mkdir -p build/renderer
          unzip web-renderer.zip -d build/renderer

      - name: Log release information
        run: |
          echo "Deploying to production from ${{ needs.get-release-context.outputs.original_branch }} branch"
          echo "Original event: ${{ needs.get-release-context.outputs.original_event }}"
          echo "Is tagged build: ${{ needs.get-release-context.outputs.is_tagged }}"
          if [ "${{ needs.get-release-context.outputs.is_tagged }}" == "true" ]; then
            echo "Tag name: ${{ needs.get-release-context.outputs.tag_name }}"
          fi

      - name: Publish
        id: cloudflare-publish
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy build/renderer --project-name=buddy
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  tag-latest:
    needs: get-release-context
    if: ${{ needs.get-release-context.outputs.should_release == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply 'latest' tag if not a tagged build
        if: needs.get-release-context.outputs.is_tagged != 'true'
        uses: EndBug/latest-tag@latest

      - name: Delete "latest" release
        if: needs.get-release-context.outputs.is_tagged != 'true'
        run: gh release delete latest --yes || echo "No latest release to delete"

  release-app:
    needs: [get-release-context, tag-latest]
    if: ${{ needs.get-release-context.outputs.should_release == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Download app build artifacts
        id: download-app-builds
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            console.log(`Finding artifacts from build workflow run ID: ${runId}`);

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            const appArtifacts = artifacts.data.artifacts.filter(
              artifact => artifact.name.startsWith("app-builds-")
            );

            if (appArtifacts.length === 0) {
              core.setFailed('Could not find any app-builds-* artifacts!');
              console.log('Available artifacts:');
              artifacts.data.artifacts.forEach(art => {
                console.log(`- ${art.name} (ID: ${art.id})`);
              });
              return;
            }

            console.log(`Found ${appArtifacts.length} app-builds artifacts`);

            const fs = require('fs');
            const path = require('path');

            if (!fs.existsSync('app-builds')) {
              fs.mkdirSync('app-builds', { recursive: true });
            }

            for (const artifact of appArtifacts) {
              console.log(`Downloading artifact: ${artifact.name} (ID: ${artifact.id})`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const zipPath = path.join('app-builds', `${artifact.name}.zip`);
              fs.writeFileSync(zipPath, Buffer.from(download.data));
              console.log(`Downloaded ${zipPath}`);
            }

      - name: Extract app build artifacts
        run: |
          for zip in app-builds/*.zip; do
            unzip "$zip" -d app-builds/
            rm "$zip"
          done
          find app-builds -type f

      - name: Release latest build
        if: needs.get-release-context.outputs.is_tagged != 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: "Latest Build"
          files: |
            app-builds/*.snap
            app-builds/*.dmg
            app-builds/*.msi
            app-builds/*.AppImage
          prerelease: true
          tag_name: latest

      - name: Release tagged build
        if: needs.get-release-context.outputs.is_tagged == 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: "Release Build"
          files: |
            app-builds/*.snap
            app-builds/*.dmg
            app-builds/*.msi
            app-builds/*.AppImage
          draft: true
          tag_name: ${{ needs.get-release-context.outputs.tag_name }}