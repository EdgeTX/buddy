name: pipeline

on:
  push:
    branches:
      - main

    tags:
      - "v*"
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --immutable

      - name: Lint
        run: yarn lint:all

  format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --immutable

      - name: Format
        run: yarn fmt:check

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --immutable

      - name: Test
        run: yarn test --coverage
        env:
          CI: true

      - name: Publish Coverage
        uses: codecov/codecov-action@v2

  storybook:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --immutable

      - name: Build
        run: yarn build-storybook

  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    needs: [test, lint, format]

    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "true"
        run: yarn --immutable

      - name: Install build deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y libudev-dev

      - name: Build
        run: yarn compile:production
        env:
          GITUHB_PR_BUILDS_KEY: ${{ secrets.PR_BUILDS_TOKEN }}

      - name: Store compiled source
        uses: actions/upload-artifact@v2
        with:
          name: compiled-${{ matrix.os }}
          retention-days: 1
          if-no-files-found: error
          path: build

  build-app:
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: :0

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    needs: compile

    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "true"
        run: yarn --immutable

      - name: Fetch compiled source
        uses: actions/download-artifact@v2
        with:
          name: compiled-${{ matrix.os }}
          path: build

      - name: Build
        run: yarn run pack

      - name: Output
        uses: actions/upload-artifact@v2
        with:
          name: electron-builds
          retention-days: 15
          if-no-files-found: error
          path: |
            dist/*.snap
            dist/*.AppImage
            dist/*.msi
            dist/*.dmg
            dist/latest-mac.yml
            dist/latest-linux.yml

      # - name: Setup xvfb (Linux)
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
      #     # start xvfb in the background
      #     sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &
      # - name: E2E
      #   run: yarn e2e:production

      # - name: Upload failure artifacts
      #   if: ${{ failure() }}
      #   uses: actions/upload-artifact@v2-preview
      #   with:
      #     name: diff
      #     path: |
      #       packages/configurator/e2e/output/*.png
      #       packages/configurator/e2e/output/*.webm
      #       packages/configurator/e2e/output/trace/*.zip
      # - name: Preview demo
      #   id: preview-demo
      #   if: github.ref != 'refs/heads/master' && matrix.os == 'ubuntu-latest'
      #   uses: netlify/actions/cli@master
      #   with:
      #     args: deploy --dir=packages/configurator/build/renderer
      #   env:
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DEMO_ID }}
      #     NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}

  release-web:
    Fneeds: compile
    runs-on: ubuntu-latest
    steps:
      - name: Fetch compiled source
        uses: actions/download-artifact@v2
        with:
          name: compiled-${{ matrix.os }}
          path: electron-builds

      - name: Preview
        id: storybook-preview
        if: github.ref != 'refs/heads/main'
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/configurator/storybook-static
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}

      - name: Comment preview URL
        if: github.ref != 'refs/heads/master'
        uses: peter-evans/commit-comment@v1
        with:
          body: |
            EdgeTX Buddy has been automatically deployed to Netlify.
            üîç Inspect: ${{ steps.preview-demo.outputs.NETLIFY_LOGS_URL }}
            ‚úÖ Preview: ${{ steps.preview-demo.outputs.NETLIFY_URL }}

      - name: Publish
        if: github.ref == 'refs/heads/main'
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/configurator/build/renderer --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}

  release-binary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Fetch binaries
        uses: actions/download-artifact@v2
        with:
          name: electron-builds
          path: electron-builds

      - name: Release latest build
        if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/v')
        uses: marvinpinto/action-automatic-releases@4edd7a5aabb1bc62e6dc99b3302d587bf3134e20
        with:
          title: "Latest Build"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          files: electron-builds/*
          automatic_release_tag: "latest"
          prerelease: true

      - name: Release tagged build
        if: startsWith(github.ref, 'refs/tags/v')
        uses: marvinpinto/action-automatic-releases@4edd7a5aabb1bc62e6dc99b3302d587bf3134e20
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          files: electron-builds/*
          prerelease: false
